#!/usr/bin/env bash

# Fail the whole script if any command fails
set -e

# Extract Settings
REGION=${PLUGIN_REGION}
BUCKET=${PLUGIN_BUCKET}
SOURCE=${PLUGIN_SOURCE}
TARGET=${PLUGIN_TARGET}
DELETE=${PLUGIN_DELETE}

CACHE_CONTROL=${PLUGIN_CACHE_CONTROL}

EXCLUDE=${PLUGIN_EXCLUDE}
INCLUDE=${PLUGIN_INCLUDE}

ACL=${PLUGIN_ACL}
SSE=${PLUGIN_SSE}

ERRORS_ONLY=${PLUGIN_ERRORS_ONLY}

AWS_ACCESS_KEY_ID=${PLUGIN_AWS_ACCESS_KEY_ID}
AWS_SECRET_ACCESS_KEY=${PLUGIN_AWS_SECRET_ACCESS_KEY}
AWS_ASSUME_ROLE=${PLUGIN_AWS_ASSUME_ROLE}

CLOUDFRONT_ID=${PLUGIN_CLOUDFRONT_ID}

if [ -z "${BUCKET}" ]; then
  echo "FATAL: Missing S3 Bucket Name"
  exit 1
fi

if [ "${TARGET:0:1}" != "/" ]; then
  # Fix the target if it is not absolute
  TARGET="/${TARGET}"
fi

# Prepare command-line options needed for aws s3 sync
declare -a OPTIONS
[ -n "${CACHE_CONTROL}" ]    && OPTIONS+=(--metadata-directive REPLACE --cache-control "'${CACHE_CONTROL}'")
[ -n "${EXCLUDE}" ]          && OPTIONS+=(--exclude "'${EXCLUDE}'")
[ -n "${INCLUDE}" ]          && OPTIONS+=(--include "'${INCLUDE}'")
[ -n "${ACL}" ]              && OPTIONS+=(--acl "${ACL}")
[ -n "${SSE}" ]              && OPTIONS+=(--sse "${SSE}")
[ "${DELETE}" == true ]      && OPTIONS+=(--delete)
[ "${ERRORS_ONLY}" == true ] && OPTIONS+=(--only-show-errors)

# Export the credentials (if provided) for the AWS CLI
if [ -n "${AWS_ACCESS_KEY_ID}" ] && [ -n "${AWS_SECRET_ACCESS_KEY}" ]; then
  export AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY
fi

if [ -n "${AWS_ASSUME_ROLE}" ]; then
  # Assume the role provided, and override credentials (if provided)
  CREDENTIALS=$(set -x; aws sts assume-role \
                  --role-arn ${AWS_ASSUME_ROLE} \
                  --role-session-name drone-s3-sync)
  export AWS_ACCESS_KEY_ID=$(echo "${CREDENTIALS}" | jq -r '.Credentials.AccessKeyId')
  export AWS_SECRET_ACCESS_KEY=$(echo "${CREDENTIALS}" | jq -r '.Credentials.SecretAccessKey')
  export AWS_SESSION_TOKEN=$(echo "${CREDENTIALS}" | jq -r '.Credentials.SessionToken')
fi

# Output the only the following command to STDOUT as well as run it
( set -x
  aws s3 sync --region "${REGION}" "${SOURCE}" "s3://${BUCKET}${TARGET%/}/" "${OPTIONS[@]}" )

# If a CloudFront Distribution ID is set, also set an invalidation to the root
# of the target we've been provided
if [ -n "${CLOUDFRONT_ID}" ]; then
  ( set -x
    aws cloudfront create-invalidation --region "${REGION}" --distribution-id "${CLOUDFRONT_ID}" --paths "${TARGET%/}/*" )
fi
